import math

solutions_list = []
max = 50 # Changes the search space
T = (1+math.sqrt(5))/2 # Tao value

# Iterate through every combination of terms
for a in range(1, max):

    for b in range(-max, max):

        for c in range(1, max):

            for d in range (-max, max):
                
                for e in range (-max, max):

                    for f in range (-max, max):

                        # Solve the system of equations corresponding to our question
                        eq1 = a**3 + 3*a*b**2 + b**3 + c**3 + 3*c*d**2 + d**3 - e**3 - 3*e*f**2 - f**3
                        eq2 = 3*a**2*b + 3*a*b**2 + 2*b**3 + 3*c**2*d + 3*c*d**2 + 2*d**3 - 3*e**2*f - 3*e*f**2 - 2*f**3

                        # Calculate norms of each pair of terms
                        norms1 = a**2 + a*b - b**2
                        norms2 = c**2 + c*d - d**2
                        norms3 = e**2 + e*f - f**2

                        if eq1 == 0: 

                            if eq2 == 0:
                                
                                # Save all solutions that hold
                                print(f"[{a}, {b}, {c}, {d}, {e}, {f}, {norms1}, {norms2}, {norms3}]")
                                solutions_list.append([(a),(b),(c),(d),(e),(f),(norms1),(norms2),(norms3)])




# Reorder by increasing. ***

# primitives_list = []
# primitives_list0 = []
# solutions_list = [
# [1, -14, 8, -13, 6, -18 , -209, -209, -396],
# [1, 15, 8, 21, 6, 24 , -209, -209, -396],
# [2, -9, 7, -9, 6, -12 , -95, -95, -180],
# [2, 11, 7, 16, 6, 18 , -95, -95, -180],
# [3, -4, 6, -5, 6, -6 , -19, -19, -36],
# [3, 7, 6, 11, 6, 12 , -19, -19, -36],
# [4, -18, 14, -18, 12, -24 , -380, -380, -720],
# [4, 1, 5, -1, 6, 0 , 19, 19, 36],
# [4, 3, 5, 6, 6, 6 , 19, 19, 36],
# [5, -13, 13, -14, 12, -18 , -209, -209, -396],
# [5, -1, 4, 1, 6, 0 , 19, 19, 36],
# [5, 6, 4, 3, 6, 6 , 19, 19, 36],
# [6, -8, 12, -10, 12, -12 , -76, -76, -144],
# [6, -5, 3, -4, 6, -6 , -19, -19, -36],
# [6, 11, 3, 7, 6, 12 , -19, -19, -36],
# [6, 14, 12, 22, 12, 24 , -76, -76, -144],
# [7, -9, 2, -9, 6, -12 , -95, -95, -180],
# [7, -3, 11, -6, 12, -6 , 19, 19, 36],
# [7, 10, 11, 17, 12, 18 , 19, 19, 36],
# [7, 16, 2, 11, 6, 18 , -95, -95, -180],
# [8, -17, 19, -19, 18, -24 , -361, -361, -684],
# [8, -13, 1, -14, 6, -18 , -209, -209, -396],
# [8, 2, 10, -2, 12, 0 , 76, 76, 144],
# [8, 6, 10, 12, 12, 12 , 76, 76, 144],
# [8, 21, 1, 15, 6, 24 , -209, -209, -396],
# [9, -12, 18, -15, 18, -18 , -171, -171, -324],
# [9, 2, 9, 7, 12, 6 , 95, 95, 180],
# [9, 7, 9, 2, 12, 6 , 95, 95, 180],
# [10, -7, 17, -11, 18, -12 , -19, -19, -36],
# [10, -2, 8, 2, 12, 0 , 76, 76, 144],
# [10, 12, 8, 6, 12, 12 , 76, 76, 144],
# [11, -6, 7, -3, 12, -6 , 19, 19, 36],
# [11, -2, 16, -7, 18, -6 , 95, 95, 180],
# [11, 13, 16, 23, 18, 24 , 95, 95, 180],
# [11, 17, 7, 10, 12, 18 , 19, 19, 36],
# [12, -16, 24, -20, 24, -24 , -304, -304, -576],
# [12, -10, 6, -8, 12, -12 , -76, -76, -144],
# [12, 3, 15, -3, 18, 0 , 171, 171, 324],
# [12, 9, 15, 18, 18, 18 , 171, 171, 324],
# [12, 22, 6, 14, 12, 24 , -76, -76, -144],
# [13, -14, 5, -13, 12, -18 , -209, -209, -396],
# [13, -11, 23, -16, 24, -18 , -95, -95, -180],
# [13, 5, 14, 13, 18, 12 , 209, 209, 396],
# [13, 8, 14, 1, 18, 6 , 209, 209, 396],
# [14, -18, 4, -18, 12, -24 , -380, -380, -720],
# [14, -6, 22, -12, 24, -12 , 76, 76, 144],
# [14, 1, 13, 8, 18, 6 , 209, 209, 396],
# [14, 13, 13, 5, 18, 12 , 209, 209, 396],
# [15, -3, 12, 3, 18, 0 , 171, 171, 324],
# [15, -1, 21, -8, 24, -6 , 209, 209, 396],
# [15, 18, 12, 9, 18, 18 , 171, 171, 324],
# [16, -7, 11, -2, 18, -6 , 95, 95, 180],
# [16, 4, 20, -4, 24, 0 , 304, 304, 576],
# [16, 12, 20, 24, 24, 24 , 304, 304, 576],
# [16, 23, 11, 13, 18, 24 , 95, 95, 180],
# [17, -11, 10, -7, 18, -12 , -19, -19, -36],
# [17, 8, 19, 19, 24, 18 , 361, 361, 684],
# [17, 9, 19, 0, 24, 6 , 361, 361, 684],
# [18, -15, 9, -12, 18, -18 , -171, -171, -324],
# [18, 4, 18, 14, 24, 12 , 380, 380, 720],
# [18, 14, 18, 4, 24, 12 , 380, 380, 720],
# [19, -19, 8, -17, 18, -24 , -361, -361, -684],
# [19, 0, 17, 9, 24, 6 , 361, 361, 684],
# [19, 19, 17, 8, 24, 18 , 361, 361, 684],
# [20, -4, 16, 4, 24, 0 , 304, 304, 576],
# [20, 24, 16, 12, 24, 24 , 304, 304, 576],
# [21, -8, 15, -1, 24, -6 , 209, 209, 396],
# [22, -12, 14, -6, 24, -12 , 76, 76, 144],
# [23, -16, 13, -11, 24, -18 , -95, -95, -180],
# [24, -20, 12, -16, 24, -24 , -304, -304, -576],
# ]

# primitives_list0 = []
# count = 0
# # For every x',y',z'...
# for i in solutions_list:
#     for j in solutions_list:
#         # In list with N(x)=N(x'), N(y)=N(y'), N(z)=N(z')
#         if i != j:
#             if (i[6]==j[6]) and (i[7]==j[7]) and (i[8]==j[8]):
#                 # Test [x,y,z] x [x',y',z']
#                 print(f"Now testing: {i} with {j}")
#                 array1 = [(i[0]+i[1]*T), (i[2]+i[3]*T), (i[4]+i[5]*T)]
#                 array2 = [(j[0]+j[1]*T), (j[2]+j[3]*T), (j[4]+j[5]*T)]
#                 product = numpy.cross(array1, array2)

#                 # If cross product is a NON-zero array, add to list. Otherwise is not primitive and discard.
#                 print(f"Cross product of array's: {product}")
#                 if (product[0] != 0) and (product[1] != 0) and (product[2] != 0):
#                 #if (product[0] < 1e-14 and product[0] > -1e-14) and (product[1] < 1e-14 and product[1] > -1e-14) and (product[2] < 1e-14 and product[2] > -1e-14):
#                     primitives_list.append(i)
#                     print(f"{i} added to list.\n")
#                     break
#                 else:
#                     print(f"{i} discarded.\n")
#                     break

# print(len(primitives_list))
# for i in primitives_list:
#     print(i)  
